import os
from fastapi import APIRouter
from pydantic import BaseModel
from crewai import Agent, Crew, Task
from dotenv import load_dotenv

load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")
router = APIRouter()

class SceneRequest(BaseModel):
    characters: list
    theme: str
    memory: list

@router.post("/generateSceneWithCrew")
async def generate_scene_with_crew(req: SceneRequest):
    # Define your agents
    scene_writer = Agent(
        role="Scene Writer",
        goal="Write engaging scenes between selected characters with rich details.",
        backstory="Experienced fiction writer."
    )
    emotion_director = Agent(
        role="Emotion Director",
        goal="Inject emotional complexity into scenes.",
        backstory="An experienced playwright who thrives on raw, emotional drama."
    )

    consequence_agent = Agent(
        role="Consequence Consultant",
        goal="Ensure actions have meaningful and logical outcomes.",
        backstory="A philosopher with a sharp eye for cause and effect."
    )

    memoryLen = len(req.memory)
    # Define task with prompt
    prompt = f"""
    Characters: {req.characters}
    Theme: {req.theme}
    Memory: {req.memory}
    Chapters Completed: {memoryLen}
    
    Write chapter {memoryLen+1} with a dramatic scene with dialogue, subtext, and character intentions.
    """
    scene_task = Task(
        description=prompt,
        expected_output="A dramatic scene with dialogue, subtext, and consequences.",
        agent=scene_writer
    )

    emotion_task = Task(
        description="Add emotional subtext and complexity to the scene generated by the Scene Writer.",
        expected_output="Emotionally layered version of the scene.",
        agent=emotion_director
    )

    consequence_task = Task(
        description="Ensure charactersâ€™ actions lead to logical consequences. Modify the scene to reflect realistic outcomes.",
        expected_output="Final scene with consequences incorporated.",
        agent=consequence_agent
    )

    crew = Crew(
        agents=[scene_writer,emotion_director, consequence_agent],
        tasks=[scene_task, emotion_task, consequence_task],
        verbose=True
    )
    result = crew.kickoff()

    return {"scene": result}